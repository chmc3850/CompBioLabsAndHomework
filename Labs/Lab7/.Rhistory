n <- rep(NA, 12)
n[1] = 2500
#problem 4
n <- rep(NA, 12) # pre allocated vector for abundance of pop
n[1] = 2500 # abundance of population at time 1
K <- 10000 # carrying cap
r <- 0.8 # growth rate
t <- 1:12 relevant time frame
for (i in t){
n[t] <- n[t-1] + ( r * n[t-1] * (K - n[t-1])/K )
}
for (i in t){
n[i] <- n[i-1] + ( r * n[i-1] * (K - n[i-1])/K )
}
t <- 1:12 relevant time frame
t <- 1:12 #relevant time frame
for (i in t){
n[i] <- n[i-1] + ( r * n[i-1] * (K - n[i-1])/K )
}
for (i in 2:13){
n[i] <- n[i-1] + ( r * n[i-1] * (K - n[i-1])/K )
}
for (i in 2:13){
n[i] <- n[i-1] + ( r * n[i-1] * (K - n[i-1])/K )
print(n[i])
}
# Problem 5a
vec <- rep(0,18)
print(vec)
#problem 5b
for (i in seq(1,18)){
vec[i] <- i * 3
}
print(vec)
#problem 5c
vec1 <- rep(0,18) # vector with 18 zeros
vec1[1] <- 1
for (i in 1:18){
vec1[i + 1] <- 1 + (2 * i)
}
print(vec1)
for (i in 1:18){
vec1[i + 1] <- 1 + (2 * vec1[i])
}
print(vec1)
for (i in 1:17){
vec1[i + 1] <- 1 + (2 * vec1[i])
}
print(vec1)
for (i in 1:17){
vec1[i + 1] <- 1 + (2 * vec1[i])
}
print(vec1)
#problem 5c
vec1 <- rep(0,18) # vector with 18 zeros
vec1[1] <- 1
for (i in 1:17){
vec1[i + 1] <- 1 + (2 * vec1[i])
}
print(vec1)
# problem 6
fib <- rep(0,20)
fib[2] <- 1
# for loop for fibonacci sequence
for (i in 3:22){
fib[i] <- fib[i-2] + fib[i-1]
}
print(fib)
# for loop for fibonacci sequence
for (i in 3:20){
fib[i] <- fib[i-2] + fib[i-1]
}
# problem 6
fib <- rep(0,20) #pre-allocation for fibonacci
fib[2] <- 1
# for loop for fibonacci sequence
for (i in 3:20){
fib[i] <- fib[i-2] + fib[i-1]
}
print(fib)
time <- 1:12 #relevant time frame
for (i in 2:13){
n[i] <- n[i-1] + ( r * n[i-1] * (K - n[i-1])/K ) # logistic growth eqn
abundance <- n
print(n[i])
}
plot(time,abundance)
#problem 4 and problem 7
n <- rep(NA, 12) # pre allocated vector for abundance of pop
n[1] = 2500 # abundance of population at time 1
K <- 10000 # carrying cap
r <- 0.8 # growth rate
time <- 1:12 #relevant time frame
for (i in 2:12){
n[i] <- n[i-1] + ( r * n[i-1] * (K - n[i-1])/K ) # logistic growth eqn
abundance <- n
print(n[i])
}
plot(time,abundance)
# Function definition:
triangleArea <- function(base, height){
area <- 0.5 * base * height
}
b1 = 10
h1 = 9
return(area)
# Function definition:
triangleArea <- function(base, height){
area <- 0.5 * base * height
return(area)
}
b1 = 10
h1 = 9
triangleArea(b1,h1)
b2 = 5
h2 = 6
triangleArea(b2,h2)
# Function definition:
myAbs <- function(n){
if (n >= 0){
return(n)
}
else if (n < 0){
n <- sqrt(n^2)
return(n)
}
}
# Demonstration of usage:
myAbs(5)
myAbs(-2.3)
testVec <- c(1.1, 2,0, -4.3, 9, -12)
myAbs(testVec)
# Function definition:
myAbs <- function(n){
for (i in 1:length(n)){
if (n[i] >= 0){
}
else if (n[i] < 0){
n[i] <- sqrt(n[i]^2)
}
}
return(n)
}
# Demonstration of usage:
myAbs(5)
myAbs(-2.3)
testVec <- c(1.1, 2,0, -4.3, 9, -12)
myAbs(testVec)
rep(0,n)
rep(0, 20)
# Function definition:
fib <- function(n, start){
fib <- rep(0,n) #pre-allocation for fibonacci
fib[1] <- start
fib[2] <- 1
# for loop for fibonacci sequence
for (i in 3:n){
fib[i] <- fib[i-2] + fib[i-1]
}
}
# Demonstration of usage:
fib(20, 0)
# Function definition:
fibSeq <- function(n, start){
fib <- rep(0,n) #pre-allocation for fibonacci
fib[1] <- start
fib[2] <- 1
# for loop for fibonacci sequence
for (i in 3:n){
fib[i] <- fib[i-2] + fib[i-1]
}
return(fib)
}
# Demonstration of usage:
fibSeq(20, 0)
fibSeq(20, 1)
# Function definition:
squareDiff <- function(x, y){
diff <- (x - y) ^ 2
return(diff)
}
# Demonstration of usage:
squareDiff(3, 5)
squareDiff(c(2, 4, 6), 4)
# Function definition:
avg <- function(vec){
mean <- sum(vec) / length(vec)
return(mean)
}
avg(c(5, 15, 10))
setwd("~/School/SP21/Computational_Bio_4420/LabsAndHW/Labs/Lab7")
data <- read.csv("DataForLab01.csv")
data <- read.csv("DataForLab07.csv")
View(data)
avg(data)
# Function definition:
avg <- function(vec){
if (is.data.frame(vec)){
vec <- vec[,1]
}
mean <- sum(vec) / length(vec)
return(mean)
}
# Demonstration of usage:
avg(c(5, 15, 10))
data <- read.csv("DataForLab07.csv")
avg(data)
# Function definition:
sumSquares <- function(vec){
mean <- avg(vec) # calc mean for vector
squareDiffs <- rep(0, length(vec)) # pre-allocate vector for squared diffs
for (i in length(vec)){
squareDiffs[i] <- squareDiff(vec[i], mean) # calc squared differences for each index
}
result <- sum(squareDiffs)
return(result)
}
# Function definition:
sumSquares <- function(vec){
if (is.data.frame(vec)){
vec <- vec[,1] #if input is DF, change to vector
}
mean <- avg(vec) # calc mean for vector
squareDiffs <- rep(0, length(vec)) # pre-allocate vector for squared diffs
for (i in length(vec)){
squareDiffs[i] <- squareDiff(vec[i], mean) # calc squared differences for each index
}
result <- sum(squareDiffs)
return(result)
}
# Demonstration of usage:
sumSquares(data)
sum(squareDiffs)
# Function definition:
sumSquares <- function(vec){
if (is.data.frame(vec)){
vec <- vec[,1] #if input is DF, change to vector
}
mean <- avg(vec) # calc mean for vector
squareDiffs <- rep(0, length(vec)) # pre-allocate vector for squared diffs
for (i in length(vec)){
squareDiffs[i] <- squareDiff(vec[i], mean) # calc squared differences for each index
}
result <- sum(squareDiffs)
return(result)
}
# Demonstration of usage:
sumSquares(data)
print(squareDiffs)
for (i in length(vec)){
squareDiffs[i] <- squareDiff(vec[i], mean) # calc squared differences for each index
print(squareDiffs)
}
result <- sum(squareDiffs)
# Function definition:
sumSquares <- function(vec){
if (is.data.frame(vec)){
vec <- vec[,1] #if input is DF, change to vector
}
mean <- avg(vec) # calc mean for vector
squareDiffs <- rep(0, length(vec)) # pre-allocate vector for squared diffs
for (i in length(vec)){
squareDiffs[i] <- squareDiff(vec[i], mean) # calc squared differences for each index
print(squareDiffs)
}
result <- sum(squareDiffs)
return(result)
}
# Demonstration of usage:
sumSquares(data)
# Function definition:
sumSquares <- function(vec){
if (is.data.frame(vec)){
vec <- vec[,1] #if input is DF, change to vector
}
mean <- avg(vec) # calc mean for vector
squareDiffs <- rep(0, length(vec)) # pre-allocate vector for squared diffs
for (i in length(vec)){
squareDiffs[i] <- squareDiff(vec[i], mean) # calc squared differences for each index
print(squareDiff(vec[i], mean))
}
result <- sum(squareDiffs)
return(result)
}
# Demonstration of usage:
sumSquares(data)
View(data)
data <- read.csv("DataForLab07.csv")
# Function definition:
sumSquares <- function(vec){
if (is.data.frame(vec)){
vec <- vec[,1] #if input is DF, change to vector
}
mean <- avg(vec) # calc mean for vector
squareDiffs <- rep(0, length(vec)) # pre-allocate vector for squared diffs
for (i in length(vec)){
squareDiffs[i] <- squareDiff(vec[i], mean) # calc squared differences for each index
print(squareDiff(vec[i], mean))
}
result <- sum(squareDiffs)
return(result)
}
# Demonstration of usage:
sumSquares(data)
# Function definition:
sumSquares <- function(vec){
if (is.data.frame(vec)){
vec <- vec[,1] #if input is DF, change to vector
}
print(length(vec))
mean <- avg(vec) # calc mean for vector
squareDiffs <- rep(0, length(vec)) # pre-allocate vector for squared diffs
for (i in length(vec)){
squareDiffs[i] <- squareDiff(vec[i], mean) # calc squared differences for each index
print(squareDiff(vec[i], mean))
}
result <- sum(squareDiffs)
return(result)
}
# Demonstration of usage:
sumSquares(data)
# Function definition:
sumSquares <- function(vec){
if (is.data.frame(vec)){
vec <- vec[,1] #if input is DF, change to vector
}
mean <- avg(vec) # calc mean for vector
print(mean)
squareDiffs <- rep(0, length(vec)) # pre-allocate vector for squared diffs
for (i in length(vec)){
squareDiffs[i] <- squareDiff(vec[i], mean) # calc squared differences for each index
print(squareDiff(vec[i], mean))
}
result <- sum(squareDiffs)
return(result)
}
# Demonstration of usage:
sumSquares(data)
# Function definition:
sumSquares <- function(vec){
if (is.data.frame(vec)){
vec <- vec[,1] #if input is DF, change to vector
}
mean <- avg(vec) # calc mean for vector
squareDiffs <- rep(0, length(vec)) # pre-allocate vector for squared diffs
print(squareDiffs)
for (i in length(vec)){
squareDiffs[i] <- squareDiff(vec[i], mean) # calc squared differences for each index
print(squareDiff(vec[i], mean))
}
result <- sum(squareDiffs)
return(result)
}
# Demonstration of usage:
sumSquares(data)
# Function definition:
sumSquares <- function(vec){
if (is.data.frame(vec)){
vec <- vec[,1] #if input is DF, change to vector
}
mean <- avg(vec) # calc mean for vector
squareDiffs <- rep(0, length(vec)) # pre-allocate vector for squared diffs
for (i in length(vec)){
squareDiffs[i] <- squareDiff(vec[i], mean) # calc squared differences for each index
print(squareDiff(vec[i], mean))
}
result <- sum(squareDiffs)
return(result)
}
# Demonstration of usage:
sumSquares(data)
# Function definition:
sumSquares <- function(vec){
if (is.data.frame(vec)){
vec <- vec[,1] #if input is DF, change to vector
}
mean <- avg(vec) # calc mean for vector
squareDiffs <- rep(0, length(vec)) # pre-allocate vector for squared diffs
for (i in length(vec)){
squareDiffs[i] <- squareDiff(vec[i], mean) # calc squared differences for each index
print(squareDiff(vec[i], mean))
print(squareDiffs)
}
result <- sum(squareDiffs)
return(result)
}
# Demonstration of usage:
sumSquares(data)
# Function definition:
sumSquares <- function(vec){
if (is.data.frame(vec)){
vec <- vec[,1] #if input is DF, change to vector
}
mean <- avg(vec) # calc mean for vector
squareDiffs <- rep(0, length(vec)) # pre-allocate vector for squared diffs
for (i in 1:length(vec)){
squareDiffs[i] <- squareDiff(vec[i], mean) # calc squared differences for each index
print(squareDiff(vec[i], mean))
print(squareDiffs)
}
result <- sum(squareDiffs)
return(result)
}
# Demonstration of usage:
sumSquares(data)
# Function definition:
sumSquares <- function(vec){
if (is.data.frame(vec)){
vec <- vec[,1] #if input is DF, change to vector
}
mean <- avg(vec) # calc mean for vector
squareDiffs <- rep(0, length(vec)) # pre-allocate vector for squared diffs
for (i in 1:length(vec)){
squareDiffs[i] <- squareDiff(vec[i], mean) # calc squared differences for each index
}
result <- sum(squareDiffs)
return(result)
}
# Demonstration of usage:
sumSquares(data)
sumSquares(c(1,2,3,4,5))
# Function definition:
triangleArea <- function(base, height){
area <- 0.5 * base * height # calc area
return(area)
}
b1 = 10
h1 = 9
triangleArea(b1,h1) #test case 1
b2 = 5
h2 = 6
triangleArea(b2,h2) #test case 2
# Function definition:
myAbs <- function(n){
for (i in 1:length(n)){
if (n[i] >= 0){
}
else if (n[i] < 0){
n[i] <- sqrt(n[i]^2) # if number is negative, change to a positive
}
}
return(n)
}
# Demonstration of usage:
myAbs(5)
myAbs(-2.3)
testVec <- c(1.1, 2, 0, -4.3, 9, -12)
myAbs(testVec)
# Function definition:
fibSeq <- function(n, start){
fib <- rep(0,n) #pre-allocation for fibonacci
fib[1] <- start
fib[2] <- 1
# for loop for fibonacci sequence
for (i in 3:n){
fib[i] <- fib[i-2] + fib[i-1]
}
return(fib)
}
# Demonstration of usage:
fibSeq(20, 0)
fibSeq(20, 1)
# Function definition:
squareDiff <- function(x, y){
diff <- (x - y) ^ 2
return(diff)
}
# Demonstration of usage:
squareDiff(3, 5)
squareDiff(c(2, 4, 6), 4)
# Function definition:
avg <- function(vec){
if (is.data.frame(vec)){
vec <- vec[,1] #if input is DF, change to vector
}
mean <- sum(vec) / length(vec) # calc mean
return(mean)
}
# Demonstration of usage:
avg(c(5, 15, 10))
data <- read.csv("DataForLab07.csv")
avg(data)
# Function definition:
sumSquares <- function(vec){
if (is.data.frame(vec)){
vec <- vec[,1] #if input is DF, change to vector
}
mean <- avg(vec) # calc mean for vector
squareDiffs <- rep(0, length(vec)) # pre-allocate vector for squared diffs
for (i in 1:length(vec)){
squareDiffs[i] <- squareDiff(vec[i], mean) # calc squared differences for each index
}
result <- sum(squareDiffs) # add up all square diffs
return(result)
}
# Demonstration of usage:
sumSquares(data)
sumSquares(c(1,2,3,4,5))
# Function definition:
myAbs <- function(n){
for (i in 1:length(n)){
if (n[i] < 0){
n[i] <- sqrt(n[i]^2) # if number is negative, change to a positive
}
}
return(n)
}
# Demonstration of usage:
myAbs(5)
myAbs(-2.3)
testVec <- c(1.1, 2, 0, -4.3, 9, -12)
myAbs(testVec)
