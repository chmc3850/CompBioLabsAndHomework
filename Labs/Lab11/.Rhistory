library(phangorn)
library(phangorn)
updateR()
install.packages("installr")
library(installr)
updateR()
versionR()
clc
R.version.string
chips <- 5
guests <- 8
#lab step #5 - how many bags each guest will eat
avgConsumption <- 0.4
chipsRemaining <- 5 - ((guests + 1) * avgConsumption)
# Penny's rank for episode IV
PennyIV <- penny[4]
# Penny's ranking of each star wars episode
penny <- c(5,9,8,3,1,2,4,7,6)
# Lenny's ranking of each star wars episode
lenny <- c(6,5,4,9,8,7,3,2,1)
# Stewie's ranking of each star wars episode
stewie <- c(1,9,5,6,8,7,2,3,4)
# Penny's rank for episode IV
PennyIV <- penny[4]
# Lenny's rank for episode IV
LennyIV <- lenny[4]
# everyones rankings
everyone <- cbind(penny,lenny, stewie)
View(everyone)
View(everyone)
# everyones rankings
everyone <- cbind(self,penny,lenny, stewie)
,
# self ranking of each star wars episode
self <- c(7,9,8,1,2,3,4,6,5)
# everyones rankings
everyone <- cbind(self,penny,lenny, stewie)
str(PennyIV, penny, everyone)
# putting ranking vectors into a dataframe
everyoneDF <- data.frame(everyone)
View(everyoneDF)
View(everyoneDF)
everyoneDF2 <- data.frame(everyone)
View(everyoneDF2)
View(everyoneDF2)
View(everyoneDF)
View(everyone)
View(everyone)
dim(eveyone,everyoneDF1)
dim(everyone,everyoneDF1)
# putting ranking vectors into a dataframe in two ways
everyoneDF1 <- data.frame(everyone)
dim(everyone,everyoneDF1)
dim(everyone)
dim(everyoneDF1)
str(everyone)
str(everyoneDF1)
typeof(everyone)
typeof(everyoneDF1)
episodeNames <- c("I","II","III","IV","V","VI","VII","VII","IX")
help("row.names")
#name rows of ranking vector
row.names(everyone) <- episodeNames
View(everyone)
View(everyone)
#name rows of ranking DF
row.names(everyoneDF1) <- episodeNames
View(everyoneDF1)
View(everyoneDF1)
#name rows of ranking vector
row.names(everyone) <- episodeNames
#name rows of ranking vector
row.names(everyone) <- episodeNames
#name rows of ranking DF
row.names(everyoneDF1) <- episodeNames
# Vector of episode names
episodeNames <- c("I","II","III","IV","V","VI","VII","VIII","IX")
#name rows of ranking vector
row.names(everyone) <- episodeNames
#name rows of ranking DF
row.names(everyoneDF1) <- episodeNames
View(everyoneDF)
View(everyoneDF)
View(everyoneDF1)
View(everyoneDF1)
everyone[3:,]
everyone[3:,:]
everyone[3,]
everyoneDF1[,4]
self[5]
#penny's rank of episode 2
penny[2]
#everyones rank for episodes 4-6
everyone[4:6,]
# everyones rank for 2,5,7
everyone[c(2,5,7),]
# penny and Stewie ranking for 4 and 6
everyone[c(4,6),c(2,4)]
everyone
lennyII <- everyone[2,3]
everyone[2,3] == everyone[5,3]
everyone[2,3] = everyone[5,3]
everyone
everyone[5,3] = lennyII
everyone
everyone["III","Penny"]
everyone["III","penny"]
everyoneDF1["I",'self']
# switch back lenny's ranks for 2 and 5 using names
lennyII <- everyone["II","lenny"]
everyone["II","lenny"] = everyone["VI","lenny"]
everyone["VI","lenny"] = lennyII
# re-do Lenny's switch with DF
lennyIIDF <- everyoneDF1$lenny[2]
everyoneDF1$lenny[2] = everyoneDF1$lenny[5]
everyoneDF1$lenny[5]= lennyIIDF
print(hi)
for (i in 1:5){
print("hi")
}
for (i in 1:5){
print("hi")
}
it <- 1:5
print(i)
for (i in 1:5){
print(i)
}
for (i in 1:5){
print(i)
}
piggyBank <- 10 #dollars
allowance <- 5 #dollars
gumCost <- 2 * 1.34 #cost of 2 packs of gum
weeks <- 8 #relevant time frame
for (i in 1:weeks) {
piggyBank <- piggyBank + allowance - gumCost
}
# Problem 1
for (i in 1:10){
print("hi")
}
# problem 2
piggyBank <- 10 #dollars
allowance <- 5 #dollars
gumCost <- 2 * 1.34 #cost of 2 packs of gum
weeks <- 8 #relevant time frame
for (i in 1:weeks) {
piggyBank <- piggyBank + allowance - gumCost
print(piggyBank)
}
for (i in 1:7){
pop <- pop - (pop * rate)
print(pop)
}
#Problem 3
pop <- 2000 # current population size
rate <- 0.05 # decay rate
for (i in 1:7){
pop <- pop - (pop * rate)
print(pop)
}
#problem 4
n[1] = 2500
#problem 4
n <- 1:12
n[1] = 2500
#problem 4
n <- rep(NA, 12)
n[1] = 2500
#problem 4
n <- rep(NA, 12) # pre allocated vector for abundance of pop
n[1] = 2500 # abundance of population at time 1
K <- 10000 # carrying cap
r <- 0.8 # growth rate
t <- 1:12 relevant time frame
for (i in t){
n[t] <- n[t-1] + ( r * n[t-1] * (K - n[t-1])/K )
}
for (i in t){
n[i] <- n[i-1] + ( r * n[i-1] * (K - n[i-1])/K )
}
t <- 1:12 relevant time frame
t <- 1:12 #relevant time frame
for (i in t){
n[i] <- n[i-1] + ( r * n[i-1] * (K - n[i-1])/K )
}
for (i in 2:13){
n[i] <- n[i-1] + ( r * n[i-1] * (K - n[i-1])/K )
}
for (i in 2:13){
n[i] <- n[i-1] + ( r * n[i-1] * (K - n[i-1])/K )
print(n[i])
}
# Problem 5a
vec <- rep(0,18)
print(vec)
#problem 5b
for (i in seq(1,18)){
vec[i] <- i * 3
}
print(vec)
#problem 5c
vec1 <- rep(0,18) # vector with 18 zeros
vec1[1] <- 1
for (i in 1:18){
vec1[i + 1] <- 1 + (2 * i)
}
print(vec1)
for (i in 1:18){
vec1[i + 1] <- 1 + (2 * vec1[i])
}
print(vec1)
for (i in 1:17){
vec1[i + 1] <- 1 + (2 * vec1[i])
}
print(vec1)
for (i in 1:17){
vec1[i + 1] <- 1 + (2 * vec1[i])
}
print(vec1)
#problem 5c
vec1 <- rep(0,18) # vector with 18 zeros
vec1[1] <- 1
for (i in 1:17){
vec1[i + 1] <- 1 + (2 * vec1[i])
}
print(vec1)
# problem 6
fib <- rep(0,20)
fib[2] <- 1
# for loop for fibonacci sequence
for (i in 3:22){
fib[i] <- fib[i-2] + fib[i-1]
}
print(fib)
# for loop for fibonacci sequence
for (i in 3:20){
fib[i] <- fib[i-2] + fib[i-1]
}
# problem 6
fib <- rep(0,20) #pre-allocation for fibonacci
fib[2] <- 1
# for loop for fibonacci sequence
for (i in 3:20){
fib[i] <- fib[i-2] + fib[i-1]
}
print(fib)
time <- 1:12 #relevant time frame
for (i in 2:13){
n[i] <- n[i-1] + ( r * n[i-1] * (K - n[i-1])/K ) # logistic growth eqn
abundance <- n
print(n[i])
}
plot(time,abundance)
#problem 4 and problem 7
n <- rep(NA, 12) # pre allocated vector for abundance of pop
n[1] = 2500 # abundance of population at time 1
K <- 10000 # carrying cap
r <- 0.8 # growth rate
time <- 1:12 #relevant time frame
for (i in 2:12){
n[i] <- n[i-1] + ( r * n[i-1] * (K - n[i-1])/K ) # logistic growth eqn
abundance <- n
print(n[i])
}
plot(time,abundance)
install.packages("tidyverse")
setwd("~/School/SP21/Computational_Bio_4420/LabsAndHW/Labs/Lab11")
install.packages("tidyverse")
setwd("~/School/SP21/Computational_Bio_4420/LabsAndHW/Labs/Lab11")
#import data
data <- read.csv("GlobalWoodDensityDatabase.csv", stringsAsFactors = F)
View(data)
View(data)
#rename some columns
colnames(data)[1] <- "Number"
colnames(data)[4] <- "Density"
colnames(data)[6] <- "Reference"
is.na(data)
which(is.na(data))
# remove na row
data <- data[-which(is.na(data))]
which(is.na(data))
which(is.na(data$density))
which(is.na(data$Density))
# remove na row
data <- data[-which(is.na(data$Density))]
which(is.na(data$Density))
# remove na row
data <- data$Density[-which(is.na(data$Density))]
which(is.na(data$Density))
which(is.na(data))
data$Density[12050]
# remove na row
data <- data$Density[-which(is.na(data$Density))]
#import data
data <- read.csv("GlobalWoodDensityDatabase.csv", stringsAsFactors = F)
#rename some columns
colnames(data)[1] <- "Number"
colnames(data)[4] <- "Density"
colnames(data)[6] <- "Reference"
which(is.na(data$Density))
data$Density[12150]
# remove na row
data$Density <- data$Density[-which(is.na(data$Density))]
# remove na row
data <- data[-which(is.na(data$Density))]
data$Density[12150]
# remove na row
data <- data[-which(is.na(data$Density))]
data$Density[12150]
# remove na row
data <- data[-which(is.na(data$Density)),]
data$Density[12150]
library("dplyr")
# collapse multiple species
condensed_data <- summarize(group_by(data, Binomial, Family), MeanDensity = mean(Density))
View(condensed_data)
# create new data frame with mean density for each family
fam_density <- summarize(group_by(data, Family), FamDensity = mean(Density))
View(fam_density)
# create new data frame with mean density for each family
fam_density <- summarize(group_by(condensed_data, Family), FamDensity = mean(Density))
# create new data frame with mean density for each family
fam_density <- summarize(group_by(condensed_data, Family), FamDensity = mean(MeanDensity))
View(fam_density)
# collapse multiple species into one species with mean density for each
condensed_data <- summarize(group_by(data, Binomial, Family), Density = mean(Density))
# create new data frame with mean density for each family
fam_density <- summarize(group_by(condensed_data, Family), MeanDensity = mean(Density))
sorted_density <- arrange(fam_density, MeanDensity)
View(sorted_density)
head(sorted_density, 8)
#find highest and lowest 8 densities
lowest_density <- head(sorted_density, 8)[1,]
View(lowest_density)
View(lowest_density)
#find highest and lowest 8 densities
lowest_density <- head(sorted_density, 8)[,1]
View(lowest_density)
highest_density <- tail(sorted_density, 8)[,1]
View(highest_density)
library("ggplot2")
#find family of highest and lowest 8 densities
lowest_density <- head(sorted_density, 8)
highest_density <- tail(sorted_density, 8)
View(condensed_data)
keepRows <- (condensed_data$Binomial %in% lowest_density$Family)
low_fam_data <- condensed_data[keepRows,]
View(low_fam_data)
lowest_density$Family
#rows for species we want to subset
keepRows <- (condensed_data$Family %in% lowest_density$Family)
low_fam_data <- condensed_data[keepRows,]
View(low_fam_data)
#rows for species we want to subset
keepRowsLow <- (condensed_data$Family %in% lowest_density$Family)
low_fam_data <- condensed_data[keepRowsLow,]
keepRowsHigh <- (condensed_data$Family %in% highest_density$Family)
high_fam_data
high_fam_data <- condensed_data[keepRowsHigh,]
View(high_fam_data)
# plot lowest density fams
p1 <- ggplot(low_fam_data, aes(y = Density)) +
geom_boxplot())
# plot lowest density fams
p1 <- ggplot(low_fam_data, aes(y = Density)) +
geom_boxplot()
p1
# plot lowest density fams
p1 <- ggplot(low_fam_data, aes(y = Density)) +
geom_boxplot(aes(fill = Family))
p1
# plot lowest density fams
p1 <- ggplot(low_fam_data, aes(x = Family = Density)) +
geom_boxplot)
p1
# plot lowest density fams
p1 <- ggplot(low_fam_data, aes(x = Family,y = Density)) +
geom_boxplot)
# plot lowest density fams
p1 <- ggplot(low_fam_data, aes(x = Family,y = Density)) +
geom_boxplot())
p1
# plot lowest density fams
p1 <- ggplot(low_fam_data, aes(x = Family,y = Density)) +
geom_boxplot()
p1
# plot lowest density fams
p1 <- ggplot(low_fam_data, aes(x = Family,y = Density)) +
geom_boxplot() + facet_grid()
p1
# plot lowest density fams
p1 <- ggplot(low_fam_data, aes(x = Family,y = Density)) +
geom_boxplot() + facet_grid(cols = vars(Family))
p1
# plot lowest density fams
p1 <- ggplot(low_fam_data, aes(x = Family,y = Density)) +
geom_boxplot() + facet_grid(vars(Family), ncol(4))
p1
# plot lowest density fams
p1 <- ggplot(low_fam_data, aes(x = Family,y = Density)) +
geom_boxplot() + facet_grid(vars(Family))
p1
# plot lowest density fams
p1 <- ggplot(low_fam_data, aes(x = Family,y = Density)) +
geom_boxplot() + facet_wrap
# plot lowest density fams
p1 <- ggplot(low_fam_data, aes(x = Family,y = Density)) +
geom_boxplot() + facet_wrap()
p1
# plot lowest density fams
p1 <- ggplot(low_fam_data, aes(y = Density)) +
geom_boxplot() + facet_wrap()
# plot lowest density fams
p1 <- ggplot(low_fam_data, aes(y = Density)) +
geom_boxplot() + facet_grid()
p1
# plot lowest density fams
p1 <- ggplot(low_fam_data, aes(y = Density, fill = Family)) +
geom_boxplot() + facet_wrap(facets = ~Family, scale="free")
p1
# plot lowest density fams
p1 <- ggplot(low_fam_data, aes(y = Density)) +
geom_boxplot() + facet_wrap(facets = ~Family, scale="free")
p1
# plot highest density fams
p2 <- ggplot(high_fam_data, aes(y = Density)) +
geom_boxplot() + facet_wrap(facets = ~Family, scale="free")
p2
#plot low density with flipped format
p3 <- ggplot(low_fam_data, aes(Family, Density)) +
geom_boxplot() +
coord_flip()
p3
#plot high density with flipped format
p3 <- ggplot(high_fam_data, aes(Family, Density)) +
geom_boxplot() +
coord_flip()
#plot low density with flipped format
p3 <- ggplot(low_fam_data, aes(Family, Density)) +
geom_boxplot() +
coord_flip()
#plot high density with flipped format
p4 <- ggplot(high_fam_data, aes(Family, Density)) +
geom_boxplot() +
coord_flip()
p4
# plot lowest density fams
p1 <- ggplot(low_fam_data, aes(y = Density)) +
geom_boxplot() + facet_wrap(facets = ~Family, scale="free") +
labs(title = "Families with Lowest Mean Density", y = "Density (g/cm^3)")
p1
#plot low density with flipped format
p3 <- ggplot(low_fam_data, aes(Family, Density)) +
geom_boxplot() +
coord_flip() +
labs(title = "Families with Lowest Mean Density", x = "Density (g/cm^3)", y = "Family")
#include appropriate libraries
library("dplyr")
library("ggplot2")
#import data
data <- read.csv("GlobalWoodDensityDatabase.csv", stringsAsFactors = F)
#rename some columns
colnames(data)[1] <- "Number"
colnames(data)[4] <- "Density"
colnames(data)[6] <- "Reference"
# remove na row
data <- data[-which(is.na(data$Density)),]
# collapse multiple species into one species with mean density for each
condensed_data <- summarize(group_by(data, Binomial, Family), Density = mean(Density))
# create new data frame with mean density for each family
fam_density <- summarize(group_by(condensed_data, Family), MeanDensity = mean(Density))
# sort data by mean density
sorted_density <- arrange(fam_density, MeanDensity)
#find family of highest and lowest 8 densities
lowest_density <- head(sorted_density, 8)
highest_density <- tail(sorted_density, 8)
#subset data with all data from highest and lowest density families
keepRowsLow <- (condensed_data$Family %in% lowest_density$Family)
low_fam_data <- condensed_data[keepRowsLow,]
keepRowsHigh <- (condensed_data$Family %in% highest_density$Family)
high_fam_data <- condensed_data[keepRowsHigh,]
# plot lowest density fams
p1 <- ggplot(low_fam_data, aes(y = Density)) +
geom_boxplot() + facet_wrap(facets = ~Family, scale="free") +
labs(title = "Families with Lowest Mean Density", y = "Density (g/cm^3)")
p1
# plot highest density fams
p2 <- ggplot(high_fam_data, aes(y = Density)) +
geom_boxplot() + facet_wrap(facets = ~Family, scale="free") +
labs(title = "Families with Highest Mean Density", y = "Density (g/cm^3)")
p2
#plot low density with flipped format
p3 <- ggplot(low_fam_data, aes(Family, Density)) +
geom_boxplot() +
coord_flip() +
labs(title = "Families with Lowest Mean Density", x = "Density (g/cm^3)", y = "Family")
p3
#plot low density with flipped format
p3 <- ggplot(low_fam_data, aes(Family, Density)) +
geom_boxplot() +
coord_flip() +
labs(title = "Families with Lowest Mean Density", y = "Density (g/cm^3)", x = "Family")
p3
#plot high density with flipped format
p4 <- ggplot(high_fam_data, aes(Family, Density)) +
geom_boxplot() +
coord_flip() +
labs(title = "Families with Highest Mean Density", y = "Density (g/cm^3)", x = "Family")
p4
