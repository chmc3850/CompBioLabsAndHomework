x3
x3term = x3[202]
x3term
x3ave = mean(x3)
x3ave
x3sd = sd(x3)
x3sd
x3new = c(x3,sample(1:10,1600,replace=T))
x3newterm = x3new[1451]
x3newterm
x4 = c(rpois(5000,c(10,40)))
x4ave = mean(x4)
x4ave
x4sd = sd(x4)
x4sd
hist(x4)
samp60 = sample(x4,60,replace=F)
samp60
samp60ave = mean(samp60)
samp60ave
x4distr=c()
for(i in 1:1200){samp = sample(x4,60,replace=F); x4disr = c(x4distr,mean(samp))}
x4distrterm = x4distr[133]
x4distr
x4distr2 = c()
for(i in 1:20000){samp = sample(x4,120,replace=F); x4distr2 = c(x4distr2,mean(samp))}
hist(x4distr2)
x4distr2ave = mean(x4distr2)
x4distr2ave
x4distr2sd = sd(x4distr2)
x4distr2sd
x4lower = x4distr2 + qnorm(0.025) * x4sd / sqrt(120)
x4upper = x4distr2 + qnorm(0.975) * x4sd / sqrt(120)
x5a = pnorm(1,mean=1.10,sd=0.085,lower.tail=F)
x5a
x5b = qnorm(.88,mean=995,sd=175)
x5b
x5c = dbinom(92,size=153,prob=.5)
x5c
x5d = pbinom(9,size=3-,prob=.20)
x5d
n = 50
while(1-pbinom(49,n,.10)<.90){n=n+1}
n
x5e = n
Name = c("Chris McSpadden")
Name
x2 = c(1,3,5,6,6,7,9)
x2
x2ave = mean(x2)
x2ave
x2med = median(x2)
x2med
x2sd = sd(x2)
x2sd
x2new = c(x2,1,2,4,8,8)
x2new
x2len = length(x2)
x2len
x3 = sample(1:10,400,replace=T)
x3
x3term = x3[202]
x3term
x3ave = mean(x3)
x3ave
x3sd = sd(x3)
x3sd
x3new = c(x3,sample(1:10,1600,replace=T))
x3newterm = x3new[1451]
x3newterm
x4 = c(rpois(5000,c(10,40)))
x4ave = mean(x4)
x4ave
x4sd = sd(x4)
x4sd
hist(x4)
samp60 = sample(x4,60,replace=F)
samp60
samp60ave = mean(samp60)
samp60ave
x4distr=c()
for(i in 1:1200){samp = sample(x4,60,replace=F); x4disr = c(x4distr,mean(samp))}
x4distrterm = x4distr[133]
x4distr
x4distr2 = c()
for(i in 1:20000){samp = sample(x4,120,replace=F); x4distr2 = c(x4distr2,mean(samp))}
hist(x4distr2)
x4distr2ave = mean(x4distr2)
x4distr2ave
x4distr2sd = sd(x4distr2)
x4distr2sd
x4lower = x4distr2 + qnorm(0.025) * x4sd / sqrt(120)
x4upper = x4distr2 + qnorm(0.975) * x4sd / sqrt(120)
x5a = pnorm(1,mean=1.10,sd=0.085,lower.tail=F)
x5a
x5b = qnorm(.88,mean=995,sd=175)
x5b
x5c = dbinom(92,size=153,prob=.5)
x5c
x5d = pbinom(9,size=30,prob=.20)
x5d
n = 50
while(1-pbinom(49,n,.10)<.90){n=n+1}
n
x5e = n
ls()
save.image("~/R/School/Statistics/McSpadden_Project2.RData")
R.version
# This portion of the code makes sure you have all the neccesary packages. Follow the promts in the console.
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.11")
pckgs_bio <- c("msa", "Biostrings")
pckgs <- c("phangorn", "ape")
miss_bio <- pckgs_bio[!pckgs_bio %in% installed.packages()]
miss <- pckgs[!pckgs %in% installed.packages()]
#install missing packages
if( length(miss_bio)) BiocManager::install(miss_bio)
install.packages("ggmsa", dependencies=TRUE)
#Call the packages
library(msa)
library(Biostrings)
library(phangorn)
library(ape)
library(ggmsa)
install.packages("phangorn")
library(phangorn)
library(phangorn)
updateR()
install.packages("installr")
library(installr)
updateR()
versionR()
clc
R.version.string
chips <- 5
guests <- 8
#lab step #5 - how many bags each guest will eat
avgConsumption <- 0.4
chipsRemaining <- 5 - ((guests + 1) * avgConsumption)
# Penny's rank for episode IV
PennyIV <- penny[4]
# Penny's ranking of each star wars episode
penny <- c(5,9,8,3,1,2,4,7,6)
# Lenny's ranking of each star wars episode
lenny <- c(6,5,4,9,8,7,3,2,1)
# Stewie's ranking of each star wars episode
stewie <- c(1,9,5,6,8,7,2,3,4)
# Penny's rank for episode IV
PennyIV <- penny[4]
# Lenny's rank for episode IV
LennyIV <- lenny[4]
# everyones rankings
everyone <- cbind(penny,lenny, stewie)
View(everyone)
View(everyone)
# everyones rankings
everyone <- cbind(self,penny,lenny, stewie)
,
# self ranking of each star wars episode
self <- c(7,9,8,1,2,3,4,6,5)
# everyones rankings
everyone <- cbind(self,penny,lenny, stewie)
str(PennyIV, penny, everyone)
# putting ranking vectors into a dataframe
everyoneDF <- data.frame(everyone)
View(everyoneDF)
View(everyoneDF)
everyoneDF2 <- data.frame(everyone)
View(everyoneDF2)
View(everyoneDF2)
View(everyoneDF)
View(everyone)
View(everyone)
dim(eveyone,everyoneDF1)
dim(everyone,everyoneDF1)
# putting ranking vectors into a dataframe in two ways
everyoneDF1 <- data.frame(everyone)
dim(everyone,everyoneDF1)
dim(everyone)
dim(everyoneDF1)
str(everyone)
str(everyoneDF1)
typeof(everyone)
typeof(everyoneDF1)
episodeNames <- c("I","II","III","IV","V","VI","VII","VII","IX")
help("row.names")
#name rows of ranking vector
row.names(everyone) <- episodeNames
View(everyone)
View(everyone)
#name rows of ranking DF
row.names(everyoneDF1) <- episodeNames
View(everyoneDF1)
View(everyoneDF1)
#name rows of ranking vector
row.names(everyone) <- episodeNames
#name rows of ranking vector
row.names(everyone) <- episodeNames
#name rows of ranking DF
row.names(everyoneDF1) <- episodeNames
# Vector of episode names
episodeNames <- c("I","II","III","IV","V","VI","VII","VIII","IX")
#name rows of ranking vector
row.names(everyone) <- episodeNames
#name rows of ranking DF
row.names(everyoneDF1) <- episodeNames
View(everyoneDF)
View(everyoneDF)
View(everyoneDF1)
View(everyoneDF1)
everyone[3:,]
everyone[3:,:]
everyone[3,]
everyoneDF1[,4]
self[5]
#penny's rank of episode 2
penny[2]
#everyones rank for episodes 4-6
everyone[4:6,]
# everyones rank for 2,5,7
everyone[c(2,5,7),]
# penny and Stewie ranking for 4 and 6
everyone[c(4,6),c(2,4)]
everyone
lennyII <- everyone[2,3]
everyone[2,3] == everyone[5,3]
everyone[2,3] = everyone[5,3]
everyone
everyone[5,3] = lennyII
everyone
everyone["III","Penny"]
everyone["III","penny"]
everyoneDF1["I",'self']
# switch back lenny's ranks for 2 and 5 using names
lennyII <- everyone["II","lenny"]
everyone["II","lenny"] = everyone["VI","lenny"]
everyone["VI","lenny"] = lennyII
# re-do Lenny's switch with DF
lennyIIDF <- everyoneDF1$lenny[2]
everyoneDF1$lenny[2] = everyoneDF1$lenny[5]
everyoneDF1$lenny[5]= lennyIIDF
print(hi)
for (i in 1:5){
print("hi")
}
for (i in 1:5){
print("hi")
}
it <- 1:5
print(i)
for (i in 1:5){
print(i)
}
for (i in 1:5){
print(i)
}
piggyBank <- 10 #dollars
allowance <- 5 #dollars
gumCost <- 2 * 1.34 #cost of 2 packs of gum
weeks <- 8 #relevant time frame
for (i in 1:weeks) {
piggyBank <- piggyBank + allowance - gumCost
}
# Problem 1
for (i in 1:10){
print("hi")
}
# problem 2
piggyBank <- 10 #dollars
allowance <- 5 #dollars
gumCost <- 2 * 1.34 #cost of 2 packs of gum
weeks <- 8 #relevant time frame
for (i in 1:weeks) {
piggyBank <- piggyBank + allowance - gumCost
print(piggyBank)
}
for (i in 1:7){
pop <- pop - (pop * rate)
print(pop)
}
#Problem 3
pop <- 2000 # current population size
rate <- 0.05 # decay rate
for (i in 1:7){
pop <- pop - (pop * rate)
print(pop)
}
#problem 4
n[1] = 2500
#problem 4
n <- 1:12
n[1] = 2500
#problem 4
n <- rep(NA, 12)
n[1] = 2500
#problem 4
n <- rep(NA, 12) # pre allocated vector for abundance of pop
n[1] = 2500 # abundance of population at time 1
K <- 10000 # carrying cap
r <- 0.8 # growth rate
t <- 1:12 relevant time frame
for (i in t){
n[t] <- n[t-1] + ( r * n[t-1] * (K - n[t-1])/K )
}
for (i in t){
n[i] <- n[i-1] + ( r * n[i-1] * (K - n[i-1])/K )
}
t <- 1:12 relevant time frame
t <- 1:12 #relevant time frame
for (i in t){
n[i] <- n[i-1] + ( r * n[i-1] * (K - n[i-1])/K )
}
for (i in 2:13){
n[i] <- n[i-1] + ( r * n[i-1] * (K - n[i-1])/K )
}
for (i in 2:13){
n[i] <- n[i-1] + ( r * n[i-1] * (K - n[i-1])/K )
print(n[i])
}
# Problem 5a
vec <- rep(0,18)
print(vec)
#problem 5b
for (i in seq(1,18)){
vec[i] <- i * 3
}
print(vec)
#problem 5c
vec1 <- rep(0,18) # vector with 18 zeros
vec1[1] <- 1
for (i in 1:18){
vec1[i + 1] <- 1 + (2 * i)
}
print(vec1)
for (i in 1:18){
vec1[i + 1] <- 1 + (2 * vec1[i])
}
print(vec1)
for (i in 1:17){
vec1[i + 1] <- 1 + (2 * vec1[i])
}
print(vec1)
for (i in 1:17){
vec1[i + 1] <- 1 + (2 * vec1[i])
}
print(vec1)
#problem 5c
vec1 <- rep(0,18) # vector with 18 zeros
vec1[1] <- 1
for (i in 1:17){
vec1[i + 1] <- 1 + (2 * vec1[i])
}
print(vec1)
# problem 6
fib <- rep(0,20)
fib[2] <- 1
# for loop for fibonacci sequence
for (i in 3:22){
fib[i] <- fib[i-2] + fib[i-1]
}
print(fib)
# for loop for fibonacci sequence
for (i in 3:20){
fib[i] <- fib[i-2] + fib[i-1]
}
# problem 6
fib <- rep(0,20) #pre-allocation for fibonacci
fib[2] <- 1
# for loop for fibonacci sequence
for (i in 3:20){
fib[i] <- fib[i-2] + fib[i-1]
}
print(fib)
time <- 1:12 #relevant time frame
for (i in 2:13){
n[i] <- n[i-1] + ( r * n[i-1] * (K - n[i-1])/K ) # logistic growth eqn
abundance <- n
print(n[i])
}
plot(time,abundance)
#problem 4 and problem 7
n <- rep(NA, 12) # pre allocated vector for abundance of pop
n[1] = 2500 # abundance of population at time 1
K <- 10000 # carrying cap
r <- 0.8 # growth rate
time <- 1:12 #relevant time frame
for (i in 2:12){
n[i] <- n[i-1] + ( r * n[i-1] * (K - n[i-1])/K ) # logistic growth eqn
abundance <- n
print(n[i])
}
plot(time,abundance)
setwd("~/School/SP21/Computational_Bio_4420/LabsAndHW/Labs/Lab5")
# set wd
setwd("~/School/SP21/Computational_Bio_4420/LabsAndHW/Labs/Lab5")
# Problem 1
x <- 22
threshold <- 5
# for loop tests if x is greater than threshold
if (x > 5){
print(paste("x is larger than", threshold))
} else {
print(paste("x is smaller than or equal to", threshold))
}
# Problem 2a
rawData <- read.csv("ExampleData.csv")
data <- rawData$x # convert dataframe to vector
# for loop changes negatives to NA in data variable
for (i in 1:length(data)){
if (data[i] < 0){
data[i] <- NA
}
}
# Problem 2b
data[is.na(data)] <- NaN # change NA in data to NaN
# Problem 2c
data[which(is.nan(data))] <- 0 # change NaN in data to 0
# Problem 2d
# for loop tests if data is in range 50:100
inRange <- 0
for (i in 1:length(data)){
if (data[i] >= 50 & data[i] <= 100){
inRange <- inRange + 1
}
}
# a better way to write problem 2d
inRangeImproved <- length(which(data >= 50 & data <= 100))
# Problem 2e
FiftyToOneHundred <- data[which(data >= 50 & data <= 100)] # vector of data in range 50:100
# Problem 2f
write.csv(x = FiftyToOneHundred, file = "FiftyToOneHundred.csv") # write the vector to a csv
# Problem 3
CO2Data <- read.csv("CO2_data_cut_paste.csv")
# Problem 3a
FirstYear <- CO2Data$Year[which(CO2Data$Gas != 0)[1]] # find first year gas is not 0
#Problem 3b
CO2Data$Year[which(CO2Data$Total >= 200 & CO2Data$Total <= 300)] # find years where total emissions is btw 200 and 300
# parameter variables
totalGenerations <- 1000
initPrey <- 100 	# initial prey abundance at time t = 1
initPred <- 10		# initial predator abundance at time t = 1
a <- 0.01 		# attack rate
r <- 0.2 		# growth rate of prey
m <- 0.05 		# mortality rate of predators
k <- 0.1 		# conversion constant of prey into predators
t <- 1:totalGenerations
p <- rep(NA, totalGenerations)
n <- rep(NA, totalGenerations)
for (i in t){
n[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
p[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
}
warnings()
n[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
for (i in t){
n[i] <- n[i-1] + (r * n[i-1]) - (a * n[i-1] * p[i-1])
p[i] <- p[i-1] + (k * a * n[i-1] * p[i-1]) - (m * p[i-1])
}
for (i in 2:totalGenerations){
n[i] <- n[i-1] + (r * n[i-1]) - (a * n[i-1] * p[i-1])
p[i] <- p[i-1] + (k * a * n[i-1] * p[i-1]) - (m * p[i-1])
}
for (i in 2:totalGenerations){
n[i] <- n[i-1] + (r * n[i-1]) - (a * n[i-1] * p[i-1])
p[i] <- p[i-1] + (k * a * n[i-1] * p[i-1]) - (m * p[i-1])
}
i <- 0
for (i in 2:totalGenerations){
n[i] <- n[i-1] + (r * n[i-1]) - (a * n[i-1] * p[i-1])
p[i] <- p[i-1] + (k * a * n[i-1] * p[i-1]) - (m * p[i-1])
}
n[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
n[1] <- initPrey
p[1] <- initPred
for (i in 2:totalGenerations){
n[i] <- n[i-1] + (r * n[i-1]) - (a * n[i-1] * p[i-1])
p[i] <- p[i-1] + (k * a * n[i-1] * p[i-1]) - (m * p[i-1])
}
n
p
# calc Lotka-Volterra model
for (i in 2:totalGenerations){
n[i] <- n[i-1] + (r * n[i-1]) - (a * n[i-1] * p[i-1])
p[i] <- p[i-1] + (k * a * n[i-1] * p[i-1]) - (m * p[i-1])
if (n[i] < 0){
n[i] <- 0
}
}
n
p
plot(t,n)
lines(t,p)
plot(t,n, xlab = "Time", ylab = "Preditor and Prey Abundance", main = "Abundance vs. Time")
lines(t,p)
plot(t,n, xlab = "Time", ylab = "Preditor and Prey Abundance", main = "Abundance vs. Time", col = "Green")
lines(t,p, col = "Red")
legend()
legend("topright")
legend("topright", legend=c("Prey", "Pred"),col=c("Green", "Red"), lty=1:2, cex=0.8)
plot(t,n, xlab = "Time", ylab = "Preditor and Prey Abundance", main = "Abundance vs. Time", col = "Green", lty = 1)
lines(t,p, col = "Red", lty = 2)
legend("topright", legend=c("Prey", "Pred"),col=c("Green", "Red"), lty=1:2, cex=0.8)
# results matrix
myResults <- cbind(t, n, p)
View(myResults)
colnames <- c("TimeStep", "PreyAbundance", "PredatorAbundance")
View(myResults)
colnames(myResults) <- c("TimeStep", "PreyAbundance", "PredatorAbundance")
View(myResults)
#write results to file
write.csv(x = myResults, file = "PredPreyResults.csv")
