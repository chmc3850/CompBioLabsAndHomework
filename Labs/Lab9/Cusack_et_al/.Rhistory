View(everyoneDF)
View(everyoneDF1)
View(everyoneDF1)
everyone[3:,]
everyone[3:,:]
everyone[3,]
everyoneDF1[,4]
self[5]
#penny's rank of episode 2
penny[2]
#everyones rank for episodes 4-6
everyone[4:6,]
# everyones rank for 2,5,7
everyone[c(2,5,7),]
# penny and Stewie ranking for 4 and 6
everyone[c(4,6),c(2,4)]
everyone
lennyII <- everyone[2,3]
everyone[2,3] == everyone[5,3]
everyone[2,3] = everyone[5,3]
everyone
everyone[5,3] = lennyII
everyone
everyone["III","Penny"]
everyone["III","penny"]
everyoneDF1["I",'self']
# switch back lenny's ranks for 2 and 5 using names
lennyII <- everyone["II","lenny"]
everyone["II","lenny"] = everyone["VI","lenny"]
everyone["VI","lenny"] = lennyII
# re-do Lenny's switch with DF
lennyIIDF <- everyoneDF1$lenny[2]
everyoneDF1$lenny[2] = everyoneDF1$lenny[5]
everyoneDF1$lenny[5]= lennyIIDF
print(hi)
for (i in 1:5){
print("hi")
}
for (i in 1:5){
print("hi")
}
it <- 1:5
print(i)
for (i in 1:5){
print(i)
}
for (i in 1:5){
print(i)
}
piggyBank <- 10 #dollars
allowance <- 5 #dollars
gumCost <- 2 * 1.34 #cost of 2 packs of gum
weeks <- 8 #relevant time frame
for (i in 1:weeks) {
piggyBank <- piggyBank + allowance - gumCost
}
# Problem 1
for (i in 1:10){
print("hi")
}
# problem 2
piggyBank <- 10 #dollars
allowance <- 5 #dollars
gumCost <- 2 * 1.34 #cost of 2 packs of gum
weeks <- 8 #relevant time frame
for (i in 1:weeks) {
piggyBank <- piggyBank + allowance - gumCost
print(piggyBank)
}
for (i in 1:7){
pop <- pop - (pop * rate)
print(pop)
}
#Problem 3
pop <- 2000 # current population size
rate <- 0.05 # decay rate
for (i in 1:7){
pop <- pop - (pop * rate)
print(pop)
}
#problem 4
n[1] = 2500
#problem 4
n <- 1:12
n[1] = 2500
#problem 4
n <- rep(NA, 12)
n[1] = 2500
#problem 4
n <- rep(NA, 12) # pre allocated vector for abundance of pop
n[1] = 2500 # abundance of population at time 1
K <- 10000 # carrying cap
r <- 0.8 # growth rate
t <- 1:12 relevant time frame
for (i in t){
n[t] <- n[t-1] + ( r * n[t-1] * (K - n[t-1])/K )
}
for (i in t){
n[i] <- n[i-1] + ( r * n[i-1] * (K - n[i-1])/K )
}
t <- 1:12 relevant time frame
t <- 1:12 #relevant time frame
for (i in t){
n[i] <- n[i-1] + ( r * n[i-1] * (K - n[i-1])/K )
}
for (i in 2:13){
n[i] <- n[i-1] + ( r * n[i-1] * (K - n[i-1])/K )
}
for (i in 2:13){
n[i] <- n[i-1] + ( r * n[i-1] * (K - n[i-1])/K )
print(n[i])
}
# Problem 5a
vec <- rep(0,18)
print(vec)
#problem 5b
for (i in seq(1,18)){
vec[i] <- i * 3
}
print(vec)
#problem 5c
vec1 <- rep(0,18) # vector with 18 zeros
vec1[1] <- 1
for (i in 1:18){
vec1[i + 1] <- 1 + (2 * i)
}
print(vec1)
for (i in 1:18){
vec1[i + 1] <- 1 + (2 * vec1[i])
}
print(vec1)
for (i in 1:17){
vec1[i + 1] <- 1 + (2 * vec1[i])
}
print(vec1)
for (i in 1:17){
vec1[i + 1] <- 1 + (2 * vec1[i])
}
print(vec1)
#problem 5c
vec1 <- rep(0,18) # vector with 18 zeros
vec1[1] <- 1
for (i in 1:17){
vec1[i + 1] <- 1 + (2 * vec1[i])
}
print(vec1)
# problem 6
fib <- rep(0,20)
fib[2] <- 1
# for loop for fibonacci sequence
for (i in 3:22){
fib[i] <- fib[i-2] + fib[i-1]
}
print(fib)
# for loop for fibonacci sequence
for (i in 3:20){
fib[i] <- fib[i-2] + fib[i-1]
}
# problem 6
fib <- rep(0,20) #pre-allocation for fibonacci
fib[2] <- 1
# for loop for fibonacci sequence
for (i in 3:20){
fib[i] <- fib[i-2] + fib[i-1]
}
print(fib)
time <- 1:12 #relevant time frame
for (i in 2:13){
n[i] <- n[i-1] + ( r * n[i-1] * (K - n[i-1])/K ) # logistic growth eqn
abundance <- n
print(n[i])
}
plot(time,abundance)
#problem 4 and problem 7
n <- rep(NA, 12) # pre allocated vector for abundance of pop
n[1] = 2500 # abundance of population at time 1
K <- 10000 # carrying cap
r <- 0.8 # growth rate
time <- 1:12 #relevant time frame
for (i in 2:12){
n[i] <- n[i-1] + ( r * n[i-1] * (K - n[i-1])/K ) # logistic growth eqn
abundance <- n
print(n[i])
}
plot(time,abundance)
install.packages("tidyverse")
setwd("~/School/SP21/Computational_Bio_4420")
setwd("~/School/SP21/Computational_Bio_4420/LabsAndHW/Labs/Lab9")
setwd("~/School/SP21/Computational_Bio_4420/LabsAndHW/Labs/Lab9/Cusack_et_al")
camData <- read.csv("Cusack_et_al_random_versus_trail_camera_trap_data_Ruaha_2013_14.csv", stringsAsFactors = F)
View(camData)
View(camData)
oneDate <- camData$DateTime[1]
strptime(oneDate)
?strptime
strptime(oneDate, format = "%d-%m-%Y %H:%M")
strptime(oneDate, format = "%Y-%m-%d %H:%M:%S")
strptime(oneDate, format, tz = "")
strptime(oneDate, format = "", tz = "")
oneDate <- camData$DateTime[1]
strptime(oneDate, format = "", tz = "")
oneDate <- camData$DateTime[2]
strptime(oneDate, format = "", tz = "")
strptime(oneDate, format = "%Y-%m-%d %H:%M:%S")
strptime(oneDate, format = "%d-%m-%Y %H:%M:%S")
strptime(oneDate, format = "%d-%m-%Y %H:%M:%S", tz = "")
format(oneDate, "%d-%m-%Y %H:%M:%S")
format(as.Date(oneDate, format = "%Y-%m-%d %H:%M:%S"), format = "%d-%m-%Y %H:%M:%S")
x <- strptime(oneDate, format = "%Y-%m-%d %H:%M:%S", tz = "")
format(x, "%d-%m-%Y %H:%M:%S")
format(x,"%d-%m-%Y %H:%M:%S")
x <- strptime(oneDate, format = "%Y-%m-%d %H:%M:%S", tz = "")
format(x,"%d-%m-%Y %H:%M:%S")
x <- strptime(oneDate, format = "%d-%m-%Y %H:%M:%S", tz = "")
format(x,"%d-%m-%Y %H:%M:%S")
x <- strptime(oneDate, "%d-%m-%Y %H:%M:%S", tz = "")
format(x,"%d-%m-%Y %H:%M:%S")
x <- strptime(oneDate, "%d/%m/%Y %H:%M:%S", tz = "")
format(x,"%d-%m-%Y %H:%M:%S")
View(x)
x <- strptime(oneDate, "%d/%m/%Y %H:%M:%S", tz = "")
format(x,"%d-%m-%Y %H:%M:%S")
x <- strptime(oneDate, format = "%d/%m/%Y %H:%M:%S", tz = "")
format(x,"%d-%m-%Y %H:%M:%S")
x <- strptime(oneDate, format = "%d/%m/%Y %H:%M", tz = "")
format(x,"%d-%m-%Y %H:%M:%S")
x <- strptime(oneDate, format = "%d/%m/%Y %H:%M", tz = "")
dates <- camData$DateTime
dates
strptime(dates, format = "%d/%m/%Y %H:%M", tz = "")
dates < strptime(dates, format = "%d/%m/%Y %H:%M", tz = "")
View(x)
strptime(dates, format = "%d/%m/%Y %H:%M", tz = "")
format(dates,"%d-%m-%Y %H:%M:%S")
format(x,"%d-%m-%Y %H:%M")
dates <- camData$DateTime
strptime(dates, format = "%d/%m/%Y %H:%M", tz = "")
dates <- strptime(camData$DateTime, format = "%d/%m/%Y %H:%M", tz = "")
format(dates,"%d-%m-%Y %H:%M")
strings <- format(dates,"%d-%m-%Y %H:%M")
strings
# import data
camData <- read.csv("Cusack_et_al_random_versus_trail_camera_trap_data_Ruaha_2013_14.csv", stringsAsFactors = F)
# convert dates from strings to time
rawDates <- strptime(camData$DateTime, format = "%d/%m/%Y %H:%M", tz = "")
strings <- format(rawDates,"%d-%m-%Y %H:%M")
strings
format(rawDates, "%Y")
years <- format(rawDates, "%Y")
# test code for extracting dates
oneDate <- camData$DateTime[2]
x <- strptime(oneDate, format = "%d/%m/%Y %H:%M", tz = "")
year(x) <- 2016
library(lubridate)
year(x) <- 2016
year(x)
if (year(x) != 2016){
print(yes)
}
if (year(x) != 2016){
print(yes)
}
if (year(x) = 2016){
print(yes)
}
if (year(x) == 2016){
print(yes)
}
if (year(x) == 2016){
print("yes")
}
year(x) <- 2015
if (year(x) == 2016){
print("yes")
}
year(x) <- 0015
year(x) <- 0015
if (year(x) < 2000){
year(x) <- year(x) + 2000
}
if (year(rawDates) < 2000){
year(rawDates) <- year(rawDates) + 2000
}
length(rawDates)
for (i in 1:length(rawDates)){
if (year(rawDates[i]) < 2000){
year(rawDates[i]) <- year(rawDates[i]) + 2000
}
}
strings <- format(rawDates,"%d-%m-%Y %H:%M")
strings
# convert dates from strings to time
rawDates <- strptime(camData$DateTime, format = "%d/%m/%Y %H:%M", tz = "")
strings <- format(rawDates,"%d-%m-%Y %H:%M")
strings
for (i in 1:length(rawDates)){
if (year(rawDates[i]) < 2000){
year(rawDates[i]) <- year(rawDates[i]) + 2000
}
}
strings <- format(rawDates,"%d-%m-%Y %H:%M")
strings
### Problem 4 ###
difftime(rawDates[1], rawDates[2], units = "days")
### Problem 4 ###
difftime(rawDates[2], rawDates[1], units = "days")
### Problem 4 ###
difftime(rawDates[2], rawDates[1], units = "hours")
### Problem 4 ###
difftime(rawDates[2], rawDates[1], units = c("days","hours")
### Problem 4 ###
difftime(rawDates[2], rawDates[1], units = c("days","hours"))
### Problem 4 ###
difftime(rawDates[2], rawDates[1], units = "days")
?which
### Problem 4 ###
which(camData$Season == "D" & camData$Station == "1" & camData$Species == "Giraffe")
difftime(rawDates[1], rawDates[332], units = "days")
### Problem 4 ###
idx <- which(camData$Season == "D" & camData$Station == "1" & camData$Species == "Giraffe")
for (i in length(idx)){
difftime(rawDates[idx[i+1]], rawDates[idx[i]], units = "days")
}
### Problem 4 ###
idx <- which(camData$Season == "D" & camData$Station == "1" & camData$Species == "Giraffe")
for (i in length(idx)){
times <- difftime(rawDates[idx[i+1]], rawDates[idx[i]], units = "days")
}
times
idx[2]
idx[1]
difftime(rawDates[idx[1+1]], rawDates[idx[i]], units = "days")
difftime(rawDates[332], rawDates[1], units = "days")
difftime(rawDates[idx[1+1]], rawDates[idx[1]], units = "days")
### Problem 4 ###
idx <- which(camData$Season == "D" & camData$Station == "1" & camData$Species == "Giraffe")
for (i in length(idx)){
times <- c(times,difftime(rawDates[idx[i+1]], rawDates[idx[i]], units = "days"))
}
times
### Problem 4 ###
idx <- which(camData$Season == "D" & camData$Station == "1" & camData$Species == "Giraffe")
for (i in 1:length(idx)){
times <- c(times,difftime(rawDates[idx[i+1]], rawDates[idx[i]], units = "days"))
}
times
abs(times)
difftime(rawDates[idx[2]], rawDates[idx[1]], units = "days")
difftime(rawDates[idx[1]], rawDates[idx[2]], units = "days")
### Problem 4 ###
idx <- which(camData$Season == "D" & camData$Station == "1" & camData$Species == "Giraffe")
for (i in 1:length(idx)){
times <- c(times,difftime(rawDates[idx[i+1]], rawDates[idx[i]], units = "days"))
}
times
?difftimes
?difftime
times <- abs(times)
avgTime <- mean(times)
avgTime
avgTime <- mean(times, na.rm = TRUE)
avgTime
### Problem 4 ###
calcAvgTime <- function(season, station, species){
idx <- which(camData$Season == season & camData$Station == station & camData$Species == species)
for (i in 1:length(idx)){
times <- c(times,difftime(rawDates[idx[i+1]], rawDates[idx[i]], units =     "days"))
}
times <- abs(times)
avgTime <- mean(times, na.rm = TRUE)
}
season <- "D"
station <- "1"
species <- "Giraffe"
calcAvgTime(season,station, species)
### Problem 4 ###
calcAvgTime <- function(season, station, species){
idx <- which(camData$Season == season & camData$Station == station & camData$Species == species)
for (i in 1:length(idx)){
times <- c(times,difftime(rawDates[idx[i+1]], rawDates[idx[i]], units =     "days"))
}
times <- abs(times)
avgTime <- mean(times, na.rm = TRUE)
return(avgTime)
}
season <- "D"
station <- "1"
species <- "Giraffe"
calcAvgTime(season,station, species)
season <- "W"
station <- "1"
species <- "Giraffe"
calcAvgTime(season,station, species)
library(lubridate)
# import data
camData <- read.csv("Cusack_et_al_random_versus_trail_camera_trap_data_Ruaha_2013_14.csv", stringsAsFactors = F)
# test code for extracting dates
oneDate <- camData$DateTime[2]
x <- strptime(oneDate, format = "%d/%m/%Y %H:%M", tz = "")
format(x,"%d-%m-%Y %H:%M")
year(x) <- 0015
if (year(x) < 2000){
year(x) <- year(x) + 2000
}
### Problem 1 ####
# convert dates from strings to time
rawDates <- strptime(camData$DateTime, format = "%d/%m/%Y %H:%M", tz = "")
### Problems 2 and 3 ###
# loop through dates and add 2000 to each 2-digit year
for (i in 1:length(rawDates)){
# find incorrect dates
if (year(rawDates[i]) < 2000){
# add 2000 to incorrect dates
year(rawDates[i]) <- year(rawDates[i]) + 2000
}
}
#this function takes season, station and species inputs and returns the avg time btw observations for those inputs
calcAvgTime <- function(season, station, species){
idx <- which(camData$Season == season & camData$Station == station & camData$Species == species) # extract indicies that correspond to input
# loop through all appropriate indecies and calc difftime
for (i in 1:length(idx)){
times <- c(times,difftime(rawDates[idx[i+1]], rawDates[idx[i]], units =     "days"))
}
times <- abs(times) # vector of each time difference
avgTime <- mean(times, na.rm = TRUE) # avg time difference
return(avgTime)
}
# test case for function
season <- "W"
station <- "1"
species <- "Giraffe"
calcAvgTime(season,station, species)
times <- rep(NA,length(idx))
#this function takes season, station and species inputs and returns the avg time btw observations for those inputs
calcAvgTime <- function(season, station, species){
idx <- which(camData$Season == season & camData$Station == station & camData$Species == species) # extract indicies that correspond to input
times <- rep(NA,length(idx))
# loop through all appropriate indecies and calc difftime
for (i in 1:length(idx)){
times <- c(times,difftime(rawDates[idx[i+1]], rawDates[idx[i]], units =     "days"))
}
times <- abs(times) # vector of each time difference
avgTime <- mean(times, na.rm = TRUE) # avg time difference
return(avgTime)
}
# test case for function
season <- "W"
station <- "1"
species <- "Giraffe"
calcAvgTime(season,station, species)
# test case for function
season <- "D"
station <- "1"
species <- "Giraffe"
calcAvgTime(season,station, species)
#this function takes season, station and species inputs and returns the avg time btw observations for those inputs
calcAvgTime <- function(season, station, species){
idx <- which(camData$Season == season & camData$Station == station & camData$Species == species) # extract indicies that correspond to input
times <- rep(NA,length(idx))
# loop through all appropriate indecies and calc difftime
for (i in 1:length(idx)){
times <- c(times,difftime(rawDates[idx[i+1]], rawDates[idx[i]], units =     "days"))
}
times <- abs(times) # vector of each time difference
avgTime <- mean(times, na.rm = TRUE) # avg time difference
return(avgTime)
}
# test case for function
season <- "D"
station <- "1"
species <- "Giraffe"
calcAvgTime(season,station, species)
library(lubridate)
# import data
camData <- read.csv("Cusack_et_al_random_versus_trail_camera_trap_data_Ruaha_2013_14.csv", stringsAsFactors = F)
# test code for extracting dates
oneDate <- camData$DateTime[2]
x <- strptime(oneDate, format = "%d/%m/%Y %H:%M", tz = "")
format(x,"%d-%m-%Y %H:%M")
year(x) <- 0015
if (year(x) < 2000){
year(x) <- year(x) + 2000
}
### Problem 1 ####
# convert dates from strings to time
rawDates <- strptime(camData$DateTime, format = "%d/%m/%Y %H:%M", tz = "")
### Problems 2 and 3 ###
# loop through dates and add 2000 to each 2-digit year
for (i in 1:length(rawDates)){
# find incorrect dates
if (year(rawDates[i]) < 2000){
# add 2000 to incorrect dates
year(rawDates[i]) <- year(rawDates[i]) + 2000
}
}
#this function takes season, station and species inputs and returns the avg time btw observations for those inputs
calcAvgTime <- function(season, station, species){
idx <- which(camData$Season == season & camData$Station == station & camData$Species == species) # extract indicies that correspond to input
times <- rep(NA,length(idx))
# loop through all appropriate indecies and calc difftime
for (i in 1:length(idx)){
times <- c(times,difftime(rawDates[idx[i+1]], rawDates[idx[i]], units =     "days"))
}
times <- abs(times) # vector of each time difference
avgTime <- mean(times, na.rm = TRUE) # avg time difference
return(avgTime)
}
# test case for function
season <- "D"
station <- "1"
species <- "Giraffe"
calcAvgTime(season,station, species)
